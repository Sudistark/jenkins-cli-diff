package hudson.scheduler;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

public class CrontabLexer extends Lexer {
  protected static final DFA[] _decisionToDFA;
  
  protected static final PredictionContextCache _sharedContextCache;
  
  public static final int TOKEN = 1;
  
  public static final int WS = 2;
  
  public static final int MINUS = 3;
  
  public static final int STAR = 4;
  
  public static final int DIV = 5;
  
  public static final int OR = 6;
  
  public static final int AT = 7;
  
  public static final int H = 8;
  
  public static final int LPAREN = 9;
  
  public static final int RPAREN = 10;
  
  public static final int YEARLY = 11;
  
  public static final int ANNUALLY = 12;
  
  public static final int MONTHLY = 13;
  
  public static final int WEEKLY = 14;
  
  public static final int DAILY = 15;
  
  public static final int MIDNIGHT = 16;
  
  public static final int HOURLY = 17;
  
  public static String[] channelNames;
  
  public static String[] modeNames;
  
  public static final String[] ruleNames;
  
  private static final String[] _LITERAL_NAMES;
  
  private static final String[] _SYMBOLIC_NAMES;
  
  public static final Vocabulary VOCABULARY;
  
  @Deprecated
  public static final String[] tokenNames;
  
  public static final String _serializedATN = "\004\000\021r\006￿￿\002\000\007\000\002\001\007\001\002\002\007\002\002\003\007\003\002\004\007\004\002\005\007\005\002\006\007\006\002\007\007\007\002\b\007\b\002\t\007\t\002\n\007\n\002\013\007\013\002\f\007\f\002\r\007\r\002\016\007\016\002\017\007\017\002\020\007\020\001\000\004\000%\b\000\013\000\f\000&\001\001\004\001*\b\001\013\001\f\001+\001\002\001\002\001\003\001\003\001\004\001\004\001\005\001\005\001\006\001\006\001\007\001\007\001\b\001\b\001\t\001\t\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\r\001\r\001\r\001\r\001\r\001\r\001\r\001\016\001\016\001\016\001\016\001\016\001\016\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\020\001\020\001\020\001\020\001\020\001\020\001\020\000\000\021\001\001\003\002\005\003\007\004\t\005\013\006\r\007\017\b\021\t\023\n\025\013\027\f\031\r\033\016\035\017\037\020!\021\001\000\001\002\000\t\t  s\000\001\001\000\000\000\000\003\001\000\000\000\000\005\001\000\000\000\000\007\001\000\000\000\000\t\001\000\000\000\000\013\001\000\000\000\000\r\001\000\000\000\000\017\001\000\000\000\000\021\001\000\000\000\000\023\001\000\000\000\000\025\001\000\000\000\000\027\001\000\000\000\000\031\001\000\000\000\000\033\001\000\000\000\000\035\001\000\000\000\000\037\001\000\000\000\000!\001\000\000\000\001$\001\000\000\000\003)\001\000\000\000\005-\001\000\000\000\007/\001\000\000\000\t1\001\000\000\000\0133\001\000\000\000\r5\001\000\000\000\0177\001\000\000\000\0219\001\000\000\000\023;\001\000\000\000\025=\001\000\000\000\027D\001\000\000\000\031M\001\000\000\000\033U\001\000\000\000\035\\\001\000\000\000\037b\001\000\000\000!k\001\000\000\000#%\00209\000$#\001\000\000\000%&\001\000\000\000&$\001\000\000\000&'\001\000\000\000'\002\001\000\000\000(*\007\000\000\000)(\001\000\000\000*+\001\000\000\000+)\001\000\000\000+,\001\000\000\000,\004\001\000\000\000-.\005-\000\000.\006\001\000\000\000/0\005*\000\0000\b\001\000\000\00012\005/\000\0002\n\001\000\000\00034\005,\000\0004\f\001\000\000\00056\005@\000\0006\016\001\000\000\00078\005H\000\0008\020\001\000\000\0009:\005(\000\000:\022\001\000\000\000;<\005)\000\000<\024\001\000\000\000=>\005y\000\000>?\005e\000\000?@\005a\000\000@A\005r\000\000AB\005l\000\000BC\005y\000\000C\026\001\000\000\000DE\005a\000\000EF\005n\000\000FG\005n\000\000GH\005u\000\000HI\005a\000\000IJ\005l\000\000JK\005l\000\000KL\005y\000\000L\030\001\000\000\000MN\005m\000\000NO\005o\000\000OP\005n\000\000PQ\005t\000\000QR\005h\000\000RS\005l\000\000ST\005y\000\000T\032\001\000\000\000UV\005w\000\000VW\005e\000\000WX\005e\000\000XY\005k\000\000YZ\005l\000\000Z[\005y\000\000[\034\001\000\000\000\\]\005d\000\000]^\005a\000\000^_\005i\000\000_`\005l\000\000`a\005y\000\000a\036\001\000\000\000bc\005m\000\000cd\005i\000\000de\005d\000\000ef\005n\000\000fg\005i\000\000gh\005g\000\000hi\005h\000\000ij\005t\000\000j \001\000\000\000kl\005h\000\000lm\005o\000\000mn\005u\000\000no\005r\000\000op\005l\000\000pq\005y\000\000q\"\001\000\000\000\003\000&+\000";
  
  public static final ATN _ATN;
  
  static  {
    RuntimeMetaData.checkVersion("4.13.1", "4.13.1");
    _sharedContextCache = new PredictionContextCache();
    channelNames = new String[] { "DEFAULT_TOKEN_CHANNEL", "HIDDEN" };
    modeNames = new String[] { "DEFAULT_MODE" };
    ruleNames = makeRuleNames();
    _LITERAL_NAMES = makeLiteralNames();
    _SYMBOLIC_NAMES = makeSymbolicNames();
    VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
    tokenNames = new String[_SYMBOLIC_NAMES.length];
    for (i = 0; i < tokenNames.length; i++) {
      tokenNames[i] = VOCABULARY.getLiteralName(i);
      if (tokenNames[i] == null)
        tokenNames[i] = VOCABULARY.getSymbolicName(i); 
      if (tokenNames[i] == null)
        tokenNames[i] = "<INVALID>"; 
    } 
    _ATN = (new ATNDeserializer()).deserialize("\004\000\021r\006￿￿\002\000\007\000\002\001\007\001\002\002\007\002\002\003\007\003\002\004\007\004\002\005\007\005\002\006\007\006\002\007\007\007\002\b\007\b\002\t\007\t\002\n\007\n\002\013\007\013\002\f\007\f\002\r\007\r\002\016\007\016\002\017\007\017\002\020\007\020\001\000\004\000%\b\000\013\000\f\000&\001\001\004\001*\b\001\013\001\f\001+\001\002\001\002\001\003\001\003\001\004\001\004\001\005\001\005\001\006\001\006\001\007\001\007\001\b\001\b\001\t\001\t\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\r\001\r\001\r\001\r\001\r\001\r\001\r\001\016\001\016\001\016\001\016\001\016\001\016\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\020\001\020\001\020\001\020\001\020\001\020\001\020\000\000\021\001\001\003\002\005\003\007\004\t\005\013\006\r\007\017\b\021\t\023\n\025\013\027\f\031\r\033\016\035\017\037\020!\021\001\000\001\002\000\t\t  s\000\001\001\000\000\000\000\003\001\000\000\000\000\005\001\000\000\000\000\007\001\000\000\000\000\t\001\000\000\000\000\013\001\000\000\000\000\r\001\000\000\000\000\017\001\000\000\000\000\021\001\000\000\000\000\023\001\000\000\000\000\025\001\000\000\000\000\027\001\000\000\000\000\031\001\000\000\000\000\033\001\000\000\000\000\035\001\000\000\000\000\037\001\000\000\000\000!\001\000\000\000\001$\001\000\000\000\003)\001\000\000\000\005-\001\000\000\000\007/\001\000\000\000\t1\001\000\000\000\0133\001\000\000\000\r5\001\000\000\000\0177\001\000\000\000\0219\001\000\000\000\023;\001\000\000\000\025=\001\000\000\000\027D\001\000\000\000\031M\001\000\000\000\033U\001\000\000\000\035\\\001\000\000\000\037b\001\000\000\000!k\001\000\000\000#%\00209\000$#\001\000\000\000%&\001\000\000\000&$\001\000\000\000&'\001\000\000\000'\002\001\000\000\000(*\007\000\000\000)(\001\000\000\000*+\001\000\000\000+)\001\000\000\000+,\001\000\000\000,\004\001\000\000\000-.\005-\000\000.\006\001\000\000\000/0\005*\000\0000\b\001\000\000\00012\005/\000\0002\n\001\000\000\00034\005,\000\0004\f\001\000\000\00056\005@\000\0006\016\001\000\000\00078\005H\000\0008\020\001\000\000\0009:\005(\000\000:\022\001\000\000\000;<\005)\000\000<\024\001\000\000\000=>\005y\000\000>?\005e\000\000?@\005a\000\000@A\005r\000\000AB\005l\000\000BC\005y\000\000C\026\001\000\000\000DE\005a\000\000EF\005n\000\000FG\005n\000\000GH\005u\000\000HI\005a\000\000IJ\005l\000\000JK\005l\000\000KL\005y\000\000L\030\001\000\000\000MN\005m\000\000NO\005o\000\000OP\005n\000\000PQ\005t\000\000QR\005h\000\000RS\005l\000\000ST\005y\000\000T\032\001\000\000\000UV\005w\000\000VW\005e\000\000WX\005e\000\000XY\005k\000\000YZ\005l\000\000Z[\005y\000\000[\034\001\000\000\000\\]\005d\000\000]^\005a\000\000^_\005i\000\000_`\005l\000\000`a\005y\000\000a\036\001\000\000\000bc\005m\000\000cd\005i\000\000de\005d\000\000ef\005n\000\000fg\005i\000\000gh\005g\000\000hi\005h\000\000ij\005t\000\000j \001\000\000\000kl\005h\000\000lm\005o\000\000mn\005u\000\000no\005r\000\000op\005l\000\000pq\005y\000\000q\"\001\000\000\000\003\000&+\000".toCharArray());
    _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
    for (i = 0; i < _ATN.getNumberOfDecisions(); i++)
      _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i); 
  }
  
  private static String[] makeRuleNames() { return new String[] { 
        "TOKEN", "WS", "MINUS", "STAR", "DIV", "OR", "AT", "H", "LPAREN", "RPAREN", 
        "YEARLY", "ANNUALLY", "MONTHLY", "WEEKLY", "DAILY", "MIDNIGHT", "HOURLY" }; }
  
  private static String[] makeLiteralNames() { return new String[] { 
        null, null, null, "'-'", "'*'", "'/'", "','", "'@'", "'H'", "'('", 
        "')'", "'yearly'", "'annually'", "'monthly'", "'weekly'", "'daily'", "'midnight'", "'hourly'" }; }
  
  private static String[] makeSymbolicNames() { return new String[] { 
        null, "TOKEN", "WS", "MINUS", "STAR", "DIV", "OR", "AT", "H", "LPAREN", 
        "RPAREN", "YEARLY", "ANNUALLY", "MONTHLY", "WEEKLY", "DAILY", "MIDNIGHT", "HOURLY" }; }
  
  @Deprecated
  public String[] getTokenNames() { return tokenNames; }
  
  public Vocabulary getVocabulary() { return VOCABULARY; }
  
  public CrontabLexer(CharStream input) {
    super(input);
    this._interp = new LexerATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
  }
  
  public String getGrammarFileName() { return "CrontabLexer.g4"; }
  
  public String[] getRuleNames() { return ruleNames; }
  
  public String getSerializedATN() { return "\004\000\021r\006￿￿\002\000\007\000\002\001\007\001\002\002\007\002\002\003\007\003\002\004\007\004\002\005\007\005\002\006\007\006\002\007\007\007\002\b\007\b\002\t\007\t\002\n\007\n\002\013\007\013\002\f\007\f\002\r\007\r\002\016\007\016\002\017\007\017\002\020\007\020\001\000\004\000%\b\000\013\000\f\000&\001\001\004\001*\b\001\013\001\f\001+\001\002\001\002\001\003\001\003\001\004\001\004\001\005\001\005\001\006\001\006\001\007\001\007\001\b\001\b\001\t\001\t\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\013\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\f\001\r\001\r\001\r\001\r\001\r\001\r\001\r\001\016\001\016\001\016\001\016\001\016\001\016\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\020\001\020\001\020\001\020\001\020\001\020\001\020\000\000\021\001\001\003\002\005\003\007\004\t\005\013\006\r\007\017\b\021\t\023\n\025\013\027\f\031\r\033\016\035\017\037\020!\021\001\000\001\002\000\t\t  s\000\001\001\000\000\000\000\003\001\000\000\000\000\005\001\000\000\000\000\007\001\000\000\000\000\t\001\000\000\000\000\013\001\000\000\000\000\r\001\000\000\000\000\017\001\000\000\000\000\021\001\000\000\000\000\023\001\000\000\000\000\025\001\000\000\000\000\027\001\000\000\000\000\031\001\000\000\000\000\033\001\000\000\000\000\035\001\000\000\000\000\037\001\000\000\000\000!\001\000\000\000\001$\001\000\000\000\003)\001\000\000\000\005-\001\000\000\000\007/\001\000\000\000\t1\001\000\000\000\0133\001\000\000\000\r5\001\000\000\000\0177\001\000\000\000\0219\001\000\000\000\023;\001\000\000\000\025=\001\000\000\000\027D\001\000\000\000\031M\001\000\000\000\033U\001\000\000\000\035\\\001\000\000\000\037b\001\000\000\000!k\001\000\000\000#%\00209\000$#\001\000\000\000%&\001\000\000\000&$\001\000\000\000&'\001\000\000\000'\002\001\000\000\000(*\007\000\000\000)(\001\000\000\000*+\001\000\000\000+)\001\000\000\000+,\001\000\000\000,\004\001\000\000\000-.\005-\000\000.\006\001\000\000\000/0\005*\000\0000\b\001\000\000\00012\005/\000\0002\n\001\000\000\00034\005,\000\0004\f\001\000\000\00056\005@\000\0006\016\001\000\000\00078\005H\000\0008\020\001\000\000\0009:\005(\000\000:\022\001\000\000\000;<\005)\000\000<\024\001\000\000\000=>\005y\000\000>?\005e\000\000?@\005a\000\000@A\005r\000\000AB\005l\000\000BC\005y\000\000C\026\001\000\000\000DE\005a\000\000EF\005n\000\000FG\005n\000\000GH\005u\000\000HI\005a\000\000IJ\005l\000\000JK\005l\000\000KL\005y\000\000L\030\001\000\000\000MN\005m\000\000NO\005o\000\000OP\005n\000\000PQ\005t\000\000QR\005h\000\000RS\005l\000\000ST\005y\000\000T\032\001\000\000\000UV\005w\000\000VW\005e\000\000WX\005e\000\000XY\005k\000\000YZ\005l\000\000Z[\005y\000\000[\034\001\000\000\000\\]\005d\000\000]^\005a\000\000^_\005i\000\000_`\005l\000\000`a\005y\000\000a\036\001\000\000\000bc\005m\000\000cd\005i\000\000de\005d\000\000ef\005n\000\000fg\005i\000\000gh\005g\000\000hi\005h\000\000ij\005t\000\000j \001\000\000\000kl\005h\000\000lm\005o\000\000mn\005u\000\000no\005r\000\000op\005l\000\000pq\005y\000\000q\"\001\000\000\000\003\000&+\000"; }
  
  public String[] getChannelNames() { return channelNames; }
  
  public String[] getModeNames() { return modeNames; }
  
  public ATN getATN() { return _ATN; }
}
